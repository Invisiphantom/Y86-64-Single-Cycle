$date
	Thu Dec 21 10:59:29 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module arch_tb $end
$var reg 1 ! clk $end
$scope module arch_inst $end
$var wire 1 ! clk $end
$var wire 1 " imem_error $end
$var wire 1 # pCnd $end
$var wire 4 $ pIcode [3:0] $end
$var wire 64 % pValC [63:0] $end
$var wire 64 & pValM [63:0] $end
$var wire 64 ' pValP [63:0] $end
$var wire 64 ( valP [63:0] $end
$var wire 64 ) valM [63:0] $end
$var wire 64 * valE [63:0] $end
$var wire 64 + valC [63:0] $end
$var wire 64 , valB [63:0] $end
$var wire 64 - valA [63:0] $end
$var wire 3 . stat [2:0] $end
$var wire 64 / rsp [63:0] $end
$var wire 64 0 rsi [63:0] $end
$var wire 64 1 rdx [63:0] $end
$var wire 64 2 rdi [63:0] $end
$var wire 64 3 rcx [63:0] $end
$var wire 64 4 rbx [63:0] $end
$var wire 64 5 rbp [63:0] $end
$var wire 64 6 rax [63:0] $end
$var wire 4 7 rB [3:0] $end
$var wire 4 8 rA [3:0] $end
$var wire 64 9 r9 [63:0] $end
$var wire 64 : r8 [63:0] $end
$var wire 64 ; r14 [63:0] $end
$var wire 64 < r13 [63:0] $end
$var wire 64 = r12 [63:0] $end
$var wire 64 > r11 [63:0] $end
$var wire 64 ? r10 [63:0] $end
$var wire 1 @ memWrite $end
$var wire 1 A memRead $end
$var wire 64 B memData [63:0] $end
$var wire 64 C memAddr [63:0] $end
$var wire 1 D instr_valid $end
$var wire 4 E ifun [3:0] $end
$var wire 4 F icode [3:0] $end
$var wire 1 G dmem_error $end
$var wire 2 H aluFun [1:0] $end
$var wire 64 I aluB [63:0] $end
$var wire 64 J aluA [63:0] $end
$var wire 1 K ZF $end
$var wire 1 L SF $end
$var wire 64 M PCaddress [63:0] $end
$var wire 1 N OF $end
$var wire 1 O Cnd $end
$scope module u_ALU $end
$var wire 1 ! clk $end
$var wire 4 P icode [3:0] $end
$var wire 2 Q aluFun [1:0] $end
$var wire 64 R aluB [63:0] $end
$var wire 64 S aluA [63:0] $end
$var reg 1 N OF $end
$var reg 1 L SF $end
$var reg 1 K ZF $end
$var reg 64 T valE [63:0] $end
$upscope $end
$scope module u_ALU_A $end
$var wire 64 U valC [63:0] $end
$var wire 64 V valA [63:0] $end
$var wire 4 W icode [3:0] $end
$var reg 64 X aluA [63:0] $end
$upscope $end
$scope module u_ALU_B $end
$var wire 64 Y valB [63:0] $end
$var wire 4 Z icode [3:0] $end
$var reg 64 [ aluB [63:0] $end
$upscope $end
$scope module u_ALU_fun $end
$var wire 4 \ ifun [3:0] $end
$var wire 4 ] icode [3:0] $end
$var reg 2 ^ aluFun [1:0] $end
$upscope $end
$scope module u_CC $end
$var wire 1 N OF $end
$var wire 1 L SF $end
$var wire 1 K ZF $end
$var wire 4 _ ifun [3:0] $end
$var reg 1 O Cnd $end
$upscope $end
$scope module u_InstMemory $end
$var wire 64 ` valC [63:0] $end
$var wire 3 a stat [2:0] $end
$var wire 80 b instruction [79:0] $end
$var wire 64 c PCaddress [63:0] $end
$var reg 4 d icode [3:0] $end
$var reg 4 e ifun [3:0] $end
$var reg 1 D instr_valid $end
$var reg 4 f rA [3:0] $end
$var reg 4 g rB [3:0] $end
$var reg 64 h valC_litend [63:0] $end
$upscope $end
$scope module u_Mem $end
$var wire 1 @ memWrite $end
$var wire 1 A memRead $end
$var wire 64 i memData [63:0] $end
$var wire 64 j memAddr [63:0] $end
$var reg 1 G dmem_error $end
$var reg 64 k valM [63:0] $end
$upscope $end
$scope module u_MemAddr $end
$var wire 4 l icode [3:0] $end
$var wire 64 m valE [63:0] $end
$var wire 64 n valA [63:0] $end
$var reg 64 o memAddr [63:0] $end
$upscope $end
$scope module u_MemControl $end
$var wire 4 p icode [3:0] $end
$var reg 1 A memRead $end
$var reg 1 @ memWrite $end
$upscope $end
$scope module u_MemData $end
$var wire 4 q icode [3:0] $end
$var wire 64 r valP [63:0] $end
$var wire 64 s valA [63:0] $end
$var reg 64 t memData [63:0] $end
$upscope $end
$scope module u_PC $end
$var wire 1 ! clk $end
$var wire 1 # pCnd $end
$var wire 4 u pIcode [3:0] $end
$var wire 64 v pValC [63:0] $end
$var wire 64 w pValM [63:0] $end
$var wire 64 x pValP [63:0] $end
$var wire 3 y stat [2:0] $end
$var reg 64 z PCaddress [63:0] $end
$upscope $end
$scope module u_PCIncre $end
$var wire 64 { PCaddress [63:0] $end
$var wire 4 | icode [3:0] $end
$var reg 64 } valP [63:0] $end
$upscope $end
$scope module u_Regs $end
$var wire 1 O Cnd $end
$var wire 1 ! clk $end
$var wire 4 ~ icode [3:0] $end
$var wire 64 !" r10 [63:0] $end
$var wire 64 "" r11 [63:0] $end
$var wire 64 #" r12 [63:0] $end
$var wire 64 $" r13 [63:0] $end
$var wire 64 %" r14 [63:0] $end
$var wire 64 &" r8 [63:0] $end
$var wire 64 '" r9 [63:0] $end
$var wire 4 (" rA [3:0] $end
$var wire 4 )" rB [3:0] $end
$var wire 64 *" rax [63:0] $end
$var wire 64 +" rbp [63:0] $end
$var wire 64 ," rbx [63:0] $end
$var wire 64 -" rcx [63:0] $end
$var wire 64 ." rdi [63:0] $end
$var wire 64 /" rdx [63:0] $end
$var wire 64 0" rsi [63:0] $end
$var wire 64 1" rsp [63:0] $end
$var wire 64 2" valE [63:0] $end
$var wire 64 3" valM [63:0] $end
$var reg 64 4" valA [63:0] $end
$var reg 64 5" valB [63:0] $end
$upscope $end
$scope module u_Stat $end
$var wire 1 G dmem_error $end
$var wire 4 6" icode [3:0] $end
$var wire 1 " imem_error $end
$var wire 1 D instr_valid $end
$var reg 3 7" stat [2:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b1 7"
b11 6"
bx 5"
bx 4"
bx 3"
b110000 2"
b0 1"
b0 0"
b0 /"
b0 ."
b0 -"
b0 ,"
b0 +"
b0 *"
b100 )"
b1111 ("
b0 '"
b0 &"
b0 %"
b0 $"
b0 #"
b0 ""
b0 !"
b11 ~
b1010 }
b11 |
b0 {
b0 z
b1 y
b1010 x
bx w
b110000 v
b11 u
bx t
bx s
b1010 r
b11 q
b11 p
bx o
bx n
b110000 m
b11 l
bx k
bx j
bx i
b11000000000000000000000000000000000000000000000000000000000000 h
b100 g
b1111 f
b0 e
b11 d
b0 c
b110000111101000011000000000000000000000000000000000000000000000000000000000000 b
b1 a
b110000 `
b0 _
b0 ^
b11 ]
b0 \
b0 [
b11 Z
bx Y
b110000 X
b11 W
bx V
b110000 U
b110000 T
b110000 S
b0 R
b0 Q
b11 P
1O
0N
b0 M
0L
1K
b110000 J
b0 I
b0 H
xG
b11 F
b0 E
1D
bx C
bx B
0A
0@
b0 ?
b0 >
b0 =
b0 <
b0 ;
b0 :
b0 9
b1111 8
b100 7
b0 6
b0 5
b0 4
b0 3
b0 2
b0 1
b0 0
b0 /
b1 .
bx -
bx ,
b110000 +
b110000 *
bx )
b1010 (
b1010 '
bx &
b110000 %
b11 $
1#
z"
0!
$end
#1
0G
#5
b101000 C
b101000 j
b101000 o
b110000 ,
b110000 Y
b110000 5"
b110000 -
b110000 V
b110000 n
b110000 s
b110000 4"
b101000 *
b101000 T
b101000 m
b101000 2"
b100000 %
b100000 v
b100000 +
b100000 U
b100000 `
b1000 J
b1000 S
b1000 X
b110000 I
b110000 R
b110000 [
b1 H
b1 Q
b1 ^
1@
b10011 B
b10011 i
b10011 t
b10000000000000000000000000000000000000000000000000000000000000 h
b0 7
b0 g
b0 )"
b10 8
b10 f
b10 ("
b1000 $
b1000 u
b1000 F
b1000 P
b1000 W
b1000 Z
b1000 ]
b1000 d
b1000 l
b1000 p
b1000 q
b1000 |
b1000 ~
b1000 6"
b10000000001000000000000000000000000000000000000000000000000000000000000000110000 b
b10011 '
b10011 x
b10011 (
b10011 r
b10011 }
b1010 M
b1010 c
b1010 z
b1010 {
b110000 /
b110000 1"
1!
#10
0!
#15
b101000 I
b101000 R
b101000 [
b101000 C
b101000 j
b101000 o
b101000 ,
b101000 Y
b101000 5"
b101000 -
b101000 V
b101000 n
b101000 s
b101000 4"
b110000 *
b110000 T
b110000 m
b110000 2"
b0 %
b0 v
b0 +
b0 U
b0 `
b0 H
b0 Q
b0 ^
1A
0@
b0 h
b1001 $
b1001 u
b1001 F
b1001 P
b1001 W
b1001 Z
b1001 ]
b1001 d
b1001 l
b1001 p
b1001 q
b1001 |
b1001 ~
b1001 6"
b101001 B
b101001 i
b101001 t
b10010000001000000010001100000000000000000000000000000000000000000000000000000000 b
b100001 '
b100001 x
b100001 (
b100001 r
b100001 }
b101000 /
b101000 1"
b100000 M
b100000 c
b100000 z
b100000 {
1!
#16
b10011 &
b10011 w
b10011 )
b10011 k
b10011 3"
#20
0!
#25
bx C
bx j
bx o
b101000 ,
b101000 Y
b101000 5"
b101000 -
b101000 V
b101000 n
b101000 s
b101000 4"
b1010 *
b1010 T
b1010 m
b1010 2"
b1010 %
b1010 v
b1010 +
b1010 U
b1010 `
b1010 J
b1010 S
b1010 X
b0 I
b0 R
b0 [
0A
b101000000000000000000000000000000000000000000000000000000000 h
b10 7
b10 g
b10 )"
b1111 8
b1111 f
b1111 ("
b11 $
b11 u
b11 F
b11 P
b11 W
b11 Z
b11 ]
b11 d
b11 l
b11 p
b11 q
b11 |
b11 ~
b11 6"
b110000111100100000101000000000000000000000000000000000000000000000000000000000 b
b11101 '
b11101 x
b11101 (
b11101 r
b11101 }
b10011 M
b10011 c
b10011 z
b10011 {
b110000 /
b110000 1"
1!
#30
0!
#35
b0 %
b0 v
b0 +
b0 U
b0 `
b0 h
b0 7
b0 g
b0 )"
b0 8
b0 f
b0 ("
b0 $
b0 u
b0 F
b0 P
b0 W
b0 Z
b0 ]
b0 d
b0 l
b0 p
b0 q
b0 |
b0 ~
b0 6"
b10010000001000000010001100000000000000000000000000000000 b
b11101 '
b11101 x
b11101 (
b11101 r
b11101 }
b1010 1
b1010 /"
b11101 M
b11101 c
b11101 z
b11101 {
1!
#36
0#
0O
bx 7
bx g
bx )"
bx 8
bx f
bx ("
bx E
bx \
bx _
bx e
bx $
bx u
bx F
bx P
bx W
bx Z
bx ]
bx d
bx l
bx p
bx q
bx |
bx ~
bx 6"
bx b
b10 .
b10 a
b10 y
b10 7"
#40
0!
#45
1!
#50
0!
#55
1!
#60
0!
#65
1!
#70
0!
#75
1!
#80
0!
#85
1!
#90
0!
#95
1!
#100
0!
#105
1!
#110
0!
#115
1!
#120
0!
#125
1!
#130
0!
#135
1!
#140
0!
#145
1!
#150
0!
#155
1!
#160
0!
#165
1!
#170
0!
#175
1!
#180
0!
#185
1!
#190
0!
#195
1!
#200
0!
#205
1!
#210
0!
#215
1!
#220
0!
#225
1!
#230
0!
#235
1!
#240
0!
#245
1!
#250
0!
#255
1!
#260
0!
#265
1!
#270
0!
#275
1!
#280
0!
#285
1!
#290
0!
#295
1!
#300
0!
#305
1!
#310
0!
#315
1!
#320
0!
#325
1!
#330
0!
#335
1!
#340
0!
#345
1!
#350
0!
#355
1!
#360
0!
#365
1!
#370
0!
#375
1!
#380
0!
#385
1!
#390
0!
#395
1!
#400
0!
#405
1!
#410
0!
#415
1!
#420
0!
#425
1!
#430
0!
#435
1!
#440
0!
#445
1!
#450
0!
#455
1!
#460
0!
#465
1!
#470
0!
#475
1!
#480
0!
#485
1!
#490
0!
#495
1!
#500
0!
#505
1!
#510
0!
#515
1!
#520
0!
#525
1!
#530
0!
#535
1!
#540
0!
#545
1!
#550
0!
#555
1!
#560
0!
#565
1!
#570
0!
#575
1!
#580
0!
#585
1!
#590
0!
#595
1!
#600
0!
#605
1!
#610
0!
#615
1!
#620
0!
#625
1!
#630
0!
#635
1!
#640
0!
#645
1!
#650
0!
#655
1!
#660
0!
#665
1!
#670
0!
#675
1!
#680
0!
#685
1!
#690
0!
#695
1!
#700
0!
#705
1!
#710
0!
#715
1!
#720
0!
#725
1!
#730
0!
#735
1!
#740
0!
#745
1!
#750
0!
#755
1!
#760
0!
#765
1!
#770
0!
#775
1!
#780
0!
#785
1!
#790
0!
#795
1!
#800
0!
#805
1!
#810
0!
#815
1!
#820
0!
#825
1!
#830
0!
#835
1!
#840
0!
#845
1!
#850
0!
#855
1!
#860
0!
#865
1!
#870
0!
#875
1!
#880
0!
#885
1!
#890
0!
#895
1!
#900
0!
#905
1!
#910
0!
#915
1!
#920
0!
#925
1!
#930
0!
#935
1!
#940
0!
#945
1!
#950
0!
#955
1!
#960
0!
#965
1!
#970
0!
#975
1!
#980
0!
#985
1!
#990
0!
#995
1!
#1000
